version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:17-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-common-express}-postgres-dev
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
    networks:
      - app-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-common-express}-redis-dev
    env_file:
      - .env
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-dev-data:/data
    networks:
      - app-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Приложение для разработки с hot reload
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      cache_from:
        - oven/bun:1
    container_name: ${COMPOSE_PROJECT_NAME:-common-express}-app-dev
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - PORT=${PORT:-4000}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
    ports:
      - '${PORT:-4000}:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-dev-network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
      - ./bun.lock:/app/bun.lock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  app-dev-network:
    driver: bridge

volumes:
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local